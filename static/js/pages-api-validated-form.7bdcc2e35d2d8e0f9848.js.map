{"version":3,"sources":["webpack:///./pages/API/ValidatedForm.mdx"],"names":["MDXContent","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","layout","_this$props","components","_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","id","parentName","className","React","Component"],"mappings":"20BAQqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IACjBE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KACDO,OAAS,KAFGN,wDAIV,IAAAO,EAC0BL,KAAKH,MAA9BS,EADDD,EACCC,WADDC,IAAAF,EAAA,gBAGP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,KAAK,UAELN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYT,MAAO,CAACgB,GAAK,kBAAvD,iBACrCL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAON,WAAYA,EAAYQ,WAAW,MAAMjB,MAAO,CAACkB,UAAY,gBAAjF,iyDAkD3CP,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,SAASN,WAAYA,EAAYQ,WAAW,KAAzD,SAAzC,QAAiIN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,YAAjI,mEA9DwCE,IAAMC","file":"static/js/pages-api-validated-form.239c78f5.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h2\" components={components} props={{\"id\":\"validatedform\"}}>{`ValidatedForm`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import ValidatedForm from 'uniforms/ValidatedForm'; // Or from the theme package.\n\n<ValidatedForm\n  // Additional asynchronous validation.\n  //   Schema validation has to be sync, so this is the only way to achieve\n  //   async validation.\n  onValidate={(model, error, callback) => {\n    // You can either ignore validation error...\n    if (omitValidation(model)) {\n      return callback(null);\n    }\n\n    // ...or any additional validation if an error is already there...\n    if (error) {\n      return callback();\n    }\n\n    // ...or feed it with another error.\n    MyAPI.validate(model, error => callback(error || null));\n  }}\n  // Validation mode.\n  //   By default, the form will start to validate from the time of the first\n  //   submit and then revalidate on every change. It's 'onChangeAfterSubmit'.\n  //   There are also 'onChange' and 'onSubmit' modes, but those are quite\n  //   self-explanatory.\n  validate=\"onChangeAfterSubmit\"\n  // Validator options.\n  //   It's passed to getValidator of your schema bridge. It really depends on\n  //   your schema.\n  validator={{clean: true}}\n  // Form methods.\n  ref={form => {\n    // Validate form with the current model.\n    //   Returns a Promise, which rejects with an validation error or\n    //   resolves without any value. Note, that it resolves/rejects AFTER\n    //   the component is rerendered.\n    form.validate();\n\n    // Validate form with key set to value.\n    //   You can use it to check, if a given value will pass the\n    //   validation or not. Returns validation Promise, as described above.\n    form.validate(key, value);\n\n    // Validate form with the given model.\n    //   Rather internal function. Returns validation Promise, as described\n    //   above.\n    form.validateModel(model);\n  }}\n/>;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Note:`}</MDXTag>{` All `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`BaseForm`}</MDXTag>{` props are also accepted and all methods are available.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}