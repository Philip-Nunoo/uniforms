(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"./pages/API/Bridge.mdx":function(e,n,r){"use strict";r.r(n),r.d(n,"default",function(){return w});var o=r("./node_modules/docz-core/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),s=r.n(o),t=r("./node_modules/docz-core/node_modules/@babel/runtime/helpers/classCallCheck.js"),d=r.n(t),i=r("./node_modules/docz-core/node_modules/@babel/runtime/helpers/createClass.js"),a=r.n(i),l=r("./node_modules/docz-core/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),m=r.n(l),c=r("./node_modules/docz-core/node_modules/@babel/runtime/helpers/getPrototypeOf.js"),u=r.n(c),p=r("./node_modules/docz-core/node_modules/@babel/runtime/helpers/inherits.js"),g=r.n(p),h=r("./node_modules/react/index.js"),b=r.n(h),f=r("./node_modules/@mdx-js/tag/dist/index.js"),w=function(e){function n(e){var r;return d()(this,n),(r=m()(this,u()(n).call(this,e))).layout=null,r}return g()(n,e),a()(n,[{key:"render",value:function(){var e=this.props,n=e.components;s()(e,["components"]);return b.a.createElement(f.MDXTag,{name:"wrapper",components:n},b.a.createElement(f.MDXTag,{name:"h2",components:n,props:{id:"bridge"}},"Bridge"),b.a.createElement(f.MDXTag,{name:"pre",components:n},b.a.createElement(f.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import Bridge from 'uniforms/Bridge';\n\n// This is a kind of abstract class. It should be extended to create custom\n// bridges. It implements all of the required methods and throws an error with\n// meaningful \"method not implemented\" error.\nclass CustomBridge extends Bridge {\n  // Check, if this bridge is compatibile with given schema.\n  static check(schema) {\n    /* ... */\n  }\n\n  // Field's scoped error.\n  getError(name, error) {\n    /* ... */\n  }\n\n  // Field's scoped error message.\n  getErrorMessage(name, error) {\n    /* ... */\n  }\n\n  // All error messages from error.\n  getErrorMessages(error) {\n    /* ... */\n  }\n\n  // Field's definition (`field` prop).\n  getField(name) {\n    /* ... */\n  }\n\n  // Field's initial value.\n  getInitialValue(name) {\n    /* ... */\n  }\n\n  // Field's props.\n  getProps(name) {\n    /* ... */\n  }\n\n  // Field's subfields (or first-level fields).\n  getSubfields(name) {\n    /* ... */\n  }\n\n  // Field's type (ex. Number, String).\n  getType(name) {\n    /* ... */\n  }\n\n  // Function with one argument - model - which throws errors when model is\n  // invalid.\n  getValidator(options) {\n    /* ... */\n  }\n}\n")))}}]),n}(b.a.Component)}}]);
//# sourceMappingURL=pages-api-bridge.7bdcc2e35d2d8e0f9848.js.map