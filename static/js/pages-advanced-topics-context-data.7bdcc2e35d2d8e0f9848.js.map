{"version":3,"sources":["webpack:///./pages/AdvancedTopics/ContextData.mdx"],"names":["MDXContent","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","layout","_this$props","components","_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","id","parentName","href","className","React","Component"],"mappings":"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","file":"static/js/pages-advanced-topics-context-data.d7d80b25.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"context-data\"}}>{`Context data`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Some components might need to know a current form state. All this data is passed as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uniforms`}</MDXTag>{` in `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://facebook.github.io/react/docs/context.html\"}}>{`React context`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"available-context-data\"}}>{`Available context data`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`MyComponentUsingUniformsContext.contextTypes = {\n  uniforms: PropTypes.shape({\n    name: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    error: PropTypes.any,\n    model: PropTypes.object.isRequired,\n\n    schema: PropTypes.shape({\n      getError: PropTypes.func.isRequired,\n      getErrorMessage: PropTypes.func.isRequired,\n      getErrorMessages: PropTypes.func.isRequired,\n      getField: PropTypes.func.isRequired,\n      getInitialValue: PropTypes.func.isRequired,\n      getProps: PropTypes.func.isRequired,\n      getSubfields: PropTypes.func.isRequired,\n      getType: PropTypes.func.isRequired,\n      getValidator: PropTypes.func.isRequired\n    }).isRequired,\n\n    state: PropTypes.shape({\n      changed: PropTypes.bool.isRequired,\n      changedMap: PropTypes.object.isRequired,\n      submitting: PropTypes.bool.isRequired,\n\n      label: PropTypes.bool.isRequired,\n      disabled: PropTypes.bool.isRequired,\n      placeholder: PropTypes.bool.isRequired\n    }).isRequired,\n\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    randomId: PropTypes.func.isRequired\n  }).isRequired\n};\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"example-displayif\"}}>{`Example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"h2\">{`DisplayIf`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import BaseField from 'uniforms/BaseField';\nimport nothing from 'uniforms/nothing';\nimport {Children} from 'react';\n\n// We have to ensure that there's only one child, because returning an array\n// from a component is prohibited.\nconst DisplayIf = ({children, condition}, {uniforms}) => (condition(uniforms) ? Children.only(children) : nothing);\nDisplayIf.contextTypes = BaseField.contextTypes;\n\nexport default DisplayIf;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example:`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`const ThreeStepForm = ({schema}) => (\n  <AutoForm schema={schema}>\n    <TextField name=\"fieldA\" />\n\n    <DisplayIf condition={context => context.model.fieldA}>\n      <section>\n        <TextField name=\"fieldB\" />\n\n        <DisplayIf condition={context => context.model.fieldB}>\n          <span>Well done!</span>\n        </DisplayIf>\n      </section>\n    </DisplayIf>\n  </AutoForm>\n);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"example-submitbutton\"}}>{`Example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"h2\">{`SubmitButton`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import BaseField from 'uniforms/BaseField';\nimport React from 'react';\nimport filterDOMProps from 'uniforms/filterDOMProps';\n\n// This field works as follows: render standard submit field and disable it, when\n// the form is invalid. It's a simplified version of a default SubmitField from\n// uniforms-unstyled.\nconst SubmitField = (\n  props,\n  {\n    uniforms: {\n      error,\n      state: {disabled, submitting, validating}\n    }\n  }\n) => <input disabled={!!(error || disabled || submitting || validating)} type=\"submit\" />;\nSubmitField.contextTypes = BaseField.contextTypes;\n\nexport default SubmitField;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"example-swapfield\"}}>{`Example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"h2\">{`SwapField`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import BaseField from 'uniforms/BaseField';\nimport get from 'lodash/get';\nimport {Children} from 'react';\nimport {cloneElement} from 'react';\n\n// This field works as follows: on click of its child it swaps values of fieldA\n// and fieldB. It's that simple.\nconst SwapField = ({children, fieldA, fieldB}, {uniforms: {model, onChange}}) =>\n  cloneElement(Children.only(children), {\n    onClick() {\n      const valueA = get(model, fieldA);\n      const valueB = get(model, fieldB);\n\n      onChange(fieldA, valueB);\n      onChange(fieldB, valueA);\n    }\n  });\nSwapField.contextTypes = BaseField.contextTypes;\n\nexport default SwapField;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Example:`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`<section>\n  <TextField name=\"firstName\" />\n  <SwapField fieldA=\"firstName\" fieldB=\"lastName\">\n    <Icon name=\"refresh\" />\n  </SwapField>\n  <TextField name=\"lastName\" />\n</section>\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}