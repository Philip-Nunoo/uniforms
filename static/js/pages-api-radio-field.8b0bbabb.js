(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{"./pages/API/RadioField.mdx":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return g});var a=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),l=o.n(a),t=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/classCallCheck.js"),s=o.n(t),r=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/createClass.js"),d=o.n(r),i=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),p=o.n(i),m=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/getPrototypeOf.js"),u=o.n(m),c=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/inherits.js"),b=o.n(c),f=o("./node_modules/react/index.js"),h=o.n(f),w=o("./node_modules/@mdx-js/tag/dist/index.js"),g=function(e){function n(e){var o;return s()(this,n),(o=p()(this,u()(n).call(this,e))).layout=null,o}return b()(n,e),d()(n,[{key:"render",value:function(){var e=this.props,n=e.components;l()(e,["components"]);return h.a.createElement(w.MDXTag,{name:"wrapper",components:n},h.a.createElement(w.MDXTag,{name:"h2",components:n,props:{id:"radiofield"}},"RadioField"),h.a.createElement(w.MDXTag,{name:"pre",components:n},h.a.createElement(w.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import RadioField from 'uniforms-unstyled/RadioField'; // Choose your theme package.\n\n<RadioField\n  // Array of allowed values.\n  //   By default, those are extracted from your schema.\n  allowedValues={[value1, value2 /* ... */]}\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Checkbox inline state.\n  //   In bootstrap themes, label is rendered as a text, but in inline mode,\n  //   it's treated as a field label.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inline={true}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  showInlineError={true}\n  // Label transform.\n  //   Allows to transform the each value into a human-readable label\n  transform={value => label}\n/>;\n")),h.a.createElement(w.MDXTag,{name:"p",components:n},h.a.createElement(w.MDXTag,{name:"strong",components:n,parentName:"p"},"Note:")," All ",h.a.createElement(w.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"BaseField")," props are also accepted."))}}]),n}(h.a.Component)}}]);
//# sourceMappingURL=pages-api-radio-field.7bdcc2e35d2d8e0f9848.js.map