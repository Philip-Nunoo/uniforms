(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{"./pages/API/SelectField.mdx":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return v});var o=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),t=a.n(o),l=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/classCallCheck.js"),r=a.n(l),s=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/createClass.js"),i=a.n(s),d=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),u=a.n(d),p=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/getPrototypeOf.js"),c=a.n(p),m=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/inherits.js"),b=a.n(m),f=a("./node_modules/react/index.js"),h=a.n(f),w=a("./node_modules/@mdx-js/tag/dist/index.js"),v=function(e){function n(e){var a;return r()(this,n),(a=u()(this,c()(n).call(this,e))).layout=null,a}return b()(n,e),i()(n,[{key:"render",value:function(){var e=this.props,n=e.components;t()(e,["components"]);return h.a.createElement(w.MDXTag,{name:"wrapper",components:n},h.a.createElement(w.MDXTag,{name:"h2",components:n,props:{id:"selectfield"}},"SelectField"),h.a.createElement(w.MDXTag,{name:"pre",components:n},h.a.createElement(w.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import SelectField from 'uniforms-unstyled/SelectField'; // Choose your theme package.\n\n<SelectField\n  // Array of allowed values.\n  //   By default, those are extracted from your schema.\n  allowedValues={[value1, value2 /* ... */]}\n  // Turn on checkbox/radio mode.\n  //   It's always true in mutltiple (i.e. fieldType === Array) mode.\n  checkboxes={true}\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Checkbox inline state.\n  //   In bootstrap themes, label is rendered as a text, but in inline mode,\n  //   it's treated as a field label.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inline={true}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than a HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n  // Props for the InputLabel\n  // Available in:\n  //   material-ui\n  labelProps={{shrink: true, disableAnimation: true}}\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  showInlineError={true}\n  // Label transform.\n  //   Allows to transform the each value into a human-readable label\n  transform={value => label} //   Set of values that will be shown in the select.\n  // Options.\n  //   It is optional and using `options` will override `transform` and `allowedValues`.\n  //   It can be either an object or an array (or a function, that returns it).\n  options={[{label: 'Hi', value: value1}, {label: 'Hello', value: value1} /* ... */]}\n/>;\n")),h.a.createElement(w.MDXTag,{name:"p",components:n},h.a.createElement(w.MDXTag,{name:"strong",components:n,parentName:"p"},"Note:")," All ",h.a.createElement(w.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"BaseField")," props are also accepted."))}}]),n}(h.a.Component)}}]);
//# sourceMappingURL=pages-api-select-field.7bdcc2e35d2d8e0f9848.js.map