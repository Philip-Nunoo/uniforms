(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"./pages/API/BoolField.mdx":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return w});var a=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),t=o.n(a),l=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/classCallCheck.js"),s=o.n(l),r=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/createClass.js"),i=o.n(r),d=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),p=o.n(d),c=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/getPrototypeOf.js"),b=o.n(c),u=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/inherits.js"),m=o.n(u),h=o("./node_modules/react/index.js"),f=o.n(h),g=o("./node_modules/@mdx-js/tag/dist/index.js"),w=function(e){function n(e){var o;return s()(this,n),(o=p()(this,b()(n).call(this,e))).layout=null,o}return m()(n,e),i()(n,[{key:"render",value:function(){var e=this.props,n=e.components;t()(e,["components"]);return f.a.createElement(g.MDXTag,{name:"wrapper",components:n},f.a.createElement(g.MDXTag,{name:"h2",components:n,props:{id:"boolfield"}},"BoolField"),f.a.createElement(g.MDXTag,{name:"pre",components:n},f.a.createElement(g.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import BoolField from 'uniforms-unstyled/BoolField'; // Choose your theme package.\n\n<BoolField\n  // Field appearance. Set to \"toggle\" to appear as a Material Toggle or to\n  // \"checkbox\" (or leave it undefined) to use a Checkbox appearance.\n  // Available in:\n  //   material\n  appearance=\"toggle\" // Renders a material-ui Toggle\n  appearance=\"checkbox\" // Renders a material-ui Checkbox\n  // Field feedback state.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap4\n  feedbackable={true}\n  // Field layout.\n  //   Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object\n  //   is a {mode: size} object. Complete string is simply passed through.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Help text.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  help=\"Need help?\"\n  // Help block className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  helpClassName=\"a b c\"\n  // Checkbox inline state.\n  //   In bootstrap themes, a label is rendered as a text but in inline mode,\n  //   it's treated as a field label.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inline={true}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than an HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n  // Left label.\n  //   In bootstrap themes, label is rendered on the right side of a checkbox.\n  //   This label is rendered above the field.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  labelBefore=\"Label\"\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  showInlineError={true}\n  // Field and sourroundings wrap className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  wrapClassName=\"a b c\"\n/>;\n")),f.a.createElement(g.MDXTag,{name:"p",components:n},f.a.createElement(g.MDXTag,{name:"strong",components:n,parentName:"p"},"Note:")," All ",f.a.createElement(g.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"BaseField")," props are also accepted."))}}]),n}(f.a.Component)}}]);
//# sourceMappingURL=pages-api-bool-field.7bdcc2e35d2d8e0f9848.js.map