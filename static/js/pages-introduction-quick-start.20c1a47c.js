(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{"./pages/Introduction/QuickStart.mdx":function(e,o,n){"use strict";n.r(o),n.d(o,"default",function(){return w});var t=n("./node_modules/docz-core/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),a=n.n(t),m=n("./node_modules/docz-core/node_modules/@babel/runtime/helpers/classCallCheck.js"),s=n.n(m),r=n("./node_modules/docz-core/node_modules/@babel/runtime/helpers/createClass.js"),l=n.n(r),i=n("./node_modules/docz-core/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),c=n.n(i),d=n("./node_modules/docz-core/node_modules/@babel/runtime/helpers/getPrototypeOf.js"),u=n.n(d),p=n("./node_modules/docz-core/node_modules/@babel/runtime/helpers/inherits.js"),h=n.n(p),f=n("./node_modules/react/index.js"),b=n.n(f),g=n("./node_modules/@mdx-js/tag/dist/index.js"),w=function(e){function o(e){var n;return s()(this,o),(n=c()(this,u()(o).call(this,e))).layout=null,n}return h()(o,e),l()(o,[{key:"render",value:function(){var e=this.props,o=e.components;a()(e,["components"]);return b.a.createElement(g.MDXTag,{name:"wrapper",components:o},b.a.createElement(g.MDXTag,{name:"h1",components:o,props:{id:"quick-start"}},"Quick start"),b.a.createElement(g.MDXTag,{name:"p",components:o},b.a.createElement(g.MDXTag,{name:"strong",components:o,parentName:"p"},"Note:")," The following examples are designed to work out of the box in meteor with ",b.a.createElement(g.MDXTag,{name:"inlineCode",components:o,parentName:"p"},"SimpleSchema")," (a very common schema in the meteor community), but it's not mandatory and you can easily use it without meteor and with different schemas (see: ",b.a.createElement(g.MDXTag,{name:"a",components:o,parentName:"p",props:{href:"#schemas"}},"Custom Schema"),"). There's also GraphQL and JSON Schema support."),b.a.createElement(g.MDXTag,{name:"p",components:o},"Let's start with defining an example schema:"),b.a.createElement(g.MDXTag,{name:"pre",components:o},b.a.createElement(g.MDXTag,{name:"code",components:o,parentName:"pre",props:{className:"language-js"}},"// Choose your theme\nimport AutoForm from 'uniforms-unstyled/AutoForm';\n\n// A compatible schema\nimport PostSchema from './schemas/Post';\n\n// This will render an automatic, validated form, with labelled fields, inline\n// validation and a submit button. If model will be present, form will be filled\n// with appropriate values.\nconst PostForm = ({model}) => <AutoForm schema={PostSchema} onSubmit={doc => db.save(doc)} model={model} />;\n")),b.a.createElement(g.MDXTag,{name:"p",components:o},"That's all! ",b.a.createElement(g.MDXTag,{name:"inlineCode",components:o,parentName:"p"},"AutoForm")," will generate a complete form with labelled fields, errors list (if any) and a submit button. Also, it will take care of validation and handle model changes."),b.a.createElement(g.MDXTag,{name:"p",components:o},"If you want to have custom layout and/or structure inside your form you can include the form content."),b.a.createElement(g.MDXTag,{name:"pre",components:o},b.a.createElement(g.MDXTag,{name:"code",components:o,parentName:"pre",props:{className:"language-javascript"}},"// Choose your theme\nimport AutoField from 'uniforms-unstyled/AutoField';\nimport AutoForm from 'uniforms-unstyled/AutoForm';\nimport SubmitField from 'uniforms-unstyled/SubmitField';\nimport TextField from 'uniforms-unstyled/TextField';\n\n// A compatible schema\nimport PostSchema from './schemas/Post';\n\nconst PostForm = ({model}) => (\n  <AutoForm schema={PostSchema} onSubmit={doc => db.save(doc)} model={model}>\n    <h2>Title</h2>\n\n    <AutoField name=\"fieldA\" />\n    <TextField name=\"fieldB\" />\n\n    <div className=\"super-special-class\">\n      <SubmitField className=\"super-special-class-with-suffix\" />\n    </div>\n  </AutoForm>\n);\n")))}}]),o}(b.a.Component)}}]);
//# sourceMappingURL=pages-introduction-quick-start.7bdcc2e35d2d8e0f9848.js.map