{"version":3,"sources":["webpack:///./pages/API/GraphQLBridge.mdx"],"names":["MDXContent","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","layout","_this$props","components","_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","id","parentName","className","React","Component"],"mappings":"20BAQqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IACjBE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KACDO,OAAS,KAFGN,wDAIV,IAAAO,EAC0BL,KAAKH,MAA9BS,EADDD,EACCC,WADDC,IAAAF,EAAA,gBAGP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,KAAK,UAELN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYT,MAAO,CAACgB,GAAK,kBAAvD,iBACrCL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAON,WAAYA,EAAYQ,WAAW,MAAMjB,MAAO,CAACkB,UAAY,gBAAjF,k7BAZHC,IAAMC","file":"static/js/pages-api-graph-ql-bridge.4d063c2c.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h2\" components={components} props={{\"id\":\"graphqlbridge\"}}>{`GraphQLBridge`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import {GraphQLBridge} from 'uniforms-bridge-graphql';\nimport {buildASTSchema} from 'graphql';\nimport {parse} from 'graphql';\n\nconst schema = \\`\n  type Author {\n    id:        String!\n    firstName: String\n    lastName:  String\n  }\n\n  type Post {\n    id:     Int!\n    author: Author!\n    title:  String\n    votes:  Int\n  }\n\n  # This is required by buildASTSchema\n  type Query { anything: ID }\n\\`;\n\nconst schemaType = buildASTSchema(parse(schema)).getType('Post');\nconst schemaData = {\n  id: {\n    allowedValues: [1, 2, 3]\n  },\n  title: {\n    options: [{label: 1, value: 'a'}, {label: 2, value: 'b'}]\n  }\n};\n\nconst schemaValidator = model => {\n  const details = [];\n\n  if (!model.id) {\n    details.push({name: 'id', message: 'ID is required!'});\n  }\n\n  // ...\n\n  if (details.length) {\n    throw {details};\n  }\n};\n\nconst bridge = new GraphQLBridge(schemaType, schemaValidator, schemaData);\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}