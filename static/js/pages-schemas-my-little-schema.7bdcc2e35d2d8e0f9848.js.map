{"version":3,"sources":["webpack:///./pages/Schemas/MyLittleSchema.mdx"],"names":["MDXContent","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","layout","_this$props","components","_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","id","parentName","className","React","Component"],"mappings":"g1BAQqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IACjBE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KACDO,OAAS,KAFGN,wDAIV,IAAAO,EAC0BL,KAAKH,MAA9BS,EADDD,EACCC,WADDC,IAAAF,EAAA,gBAGP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,KAAK,UAELN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYT,MAAO,CAACgB,GAAK,2BAAvD,YAA+FL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,MAA7D,mBACpIN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,SAASN,WAAYA,EAAYQ,WAAW,KAAzD,SAAzC,0GACAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAON,WAAYA,EAAYQ,WAAW,MAAMjB,MAAO,CAACkB,UAAY,gBAAjF,klEAbHC,IAAMC","file":"static/js/pages-schemas-my-little-schema.6098b95b.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"example-mylittleschema\"}}>{`Example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"h1\">{`MyLittleSchema`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Note:`}</MDXTag>{` This is a very basic schema just to show how it works and how you can create your own schema bridges.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import Bridge from 'uniforms/Bridge';\n\nclass MyLittleSchema extends Bridge {\n  constructor(schema, validator) {\n    super();\n\n    this.schema = schema;\n    this.validator = validator;\n  }\n\n  getError(name, error) {\n    return error && error[name];\n  }\n\n  getErrorMessage(name, error) {\n    return error && error[name];\n  }\n\n  getErrorMessages(error) {\n    return error ? Object.keys(this.schema).map(field => error[field]) : [];\n  }\n\n  getField(name) {\n    return this.schema[name.replace(/\\.\\d+/g, '.\\$')];\n  }\n\n  getType(name) {\n    return this.schema[name.replace(/\\.\\d+/g, '.\\$')].__type__;\n  }\n\n  getProps(name) {\n    return this.schema[name.replace(/\\.\\d+/g, '.\\$')];\n  }\n\n  getInitialValue(name) {\n    return this.schema[name.replace(/\\.\\d+/g, '.\\$')].initialValue;\n  }\n\n  getSubfields(name) {\n    return name\n      ? this.schema[name.replace(/\\.\\d+/g, '.\\$')].subfields || []\n      : Object.keys(this.schema).filter(field => field.indexOf('.') === -1);\n  }\n\n  getValidator() {\n    return this.validator;\n  }\n}\n\nconst bridge = new MyLittleSchema(\n  {\n    login: {\n      __type__: String,\n      required: true,\n      initialValue: '',\n      label: 'Login'\n    },\n    password1: {\n      __type__: String,\n      required: true,\n      initialValue: '',\n      label: 'Password'\n    },\n    password2: {\n      __type__: String,\n      required: true,\n      initialValue: '',\n      label: 'Password (again)'\n    }\n  },\n  model => {\n    const error = {};\n\n    if (!model.login) {\n      error.login = 'Login is required!';\n    } else if (model.login.length < 5) {\n      error.login = 'Login has to be at least 5 characters long!';\n    }\n\n    if (!model.password1) {\n      error.password1 = 'Password is required!';\n    } else if (model.password1.length < 10) {\n      error.login = 'Password has to be at least 10 characters long!';\n    }\n\n    if (model.password1 !== model.password2) {\n      error.password1 = 'Passwords mismatch!';\n    }\n\n    if (Object.keys(error).length) {\n      throw error;\n    }\n  }\n);\n\n<AutoForm schema={bridge} />;\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}