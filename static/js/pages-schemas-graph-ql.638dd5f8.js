(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{"./pages/Schemas/GraphQL.mdx":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return _});var t=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),a=o.n(t),s=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/classCallCheck.js"),r=o.n(s),d=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/createClass.js"),i=o.n(d),l=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),m=o.n(l),c=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/getPrototypeOf.js"),p=o.n(c),u=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/inherits.js"),h=o.n(u),b=o("./node_modules/react/index.js"),g=o.n(b),f=o("./node_modules/@mdx-js/tag/dist/index.js"),_=function(e){function n(e){var o;return r()(this,n),(o=m()(this,p()(n).call(this,e))).layout=null,o}return h()(n,e),i()(n,[{key:"render",value:function(){var e=this.props,n=e.components;a()(e,["components"]);return g.a.createElement(f.MDXTag,{name:"wrapper",components:n},g.a.createElement(f.MDXTag,{name:"h1",components:n,props:{id:"graphql-definition"}},"GraphQL definition"),g.a.createElement(f.MDXTag,{name:"pre",components:n},g.a.createElement(f.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import {GraphQLBridge} from 'uniforms-bridge-graphql';\nimport {buildASTSchema} from 'graphql';\nimport {parse} from 'graphql';\n\nconst schema = `\n    type Author {\n        id:        String!\n        firstName: String\n        lastName:  String\n    }\n\n    type Post {\n        id:     Int!\n        author: Author!\n        title:  String\n        votes:  Int\n    }\n\n    # This is required by buildASTSchema\n    type Query { anything: ID }\n`;\n\nconst schemaType = buildASTSchema(parse(schema)).getType('Post');\nconst schemaData = {\n  id: {\n    allowedValues: [1, 2, 3]\n  },\n  title: {\n    options: [{label: 1, value: 'a'}, {label: 2, value: 'b'}]\n  }\n};\n\nconst schemaValidator = model => {\n  const details = [];\n\n  if (!model.id) {\n    details.push({name: 'id', message: 'ID is required!'});\n  }\n\n  // ...\n\n  if (details.length) {\n    throw {details};\n  }\n};\n\nconst bridge = new GraphQLBridge(schemaType, schemaValidator, schemaData);\n\n// Later...\n\n<ValidatedForm schema={bridge} />;\n")))}}]),n}(g.a.Component)}}]);
//# sourceMappingURL=pages-schemas-graph-ql.7bdcc2e35d2d8e0f9848.js.map