(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"./pages/API/BaseField.mdx":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return g});var l=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),s=a.n(l),o=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/classCallCheck.js"),t=a.n(o),d=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/createClass.js"),r=a.n(d),i=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),u=a.n(i),p=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/getPrototypeOf.js"),c=a.n(p),m=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/inherits.js"),h=a.n(m),b=a("./node_modules/react/index.js"),f=a.n(b),w=a("./node_modules/@mdx-js/tag/dist/index.js"),g=function(e){function n(e){var a;return t()(this,n),(a=u()(this,c()(n).call(this,e))).layout=null,a}return h()(n,e),r()(n,[{key:"render",value:function(){var e=this.props,n=e.components;s()(e,["components"]);return f.a.createElement(w.MDXTag,{name:"wrapper",components:n},f.a.createElement(w.MDXTag,{name:"h2",components:n,props:{id:"basefield"}},"BaseField"),f.a.createElement(w.MDXTag,{name:"pre",components:n},f.a.createElement(w.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import BaseField from 'uniforms/BaseField';\n\n// You can't really render a BaseField because it doesn't have a render method.\n// It's a base class of all packaged fields, so that all props below are available\n// to all fields.\n<BaseField\n  // Field disabled state.\n  //   It's passed directly to the field, but it propagates same as the label.\n  disabled={false}\n  // Field label.\n  //   This prop has three modes. If you pass a string, then it will be used\n  //   as a label. If you pass a null, then it won't have a label, but nested\n  //   fields will have default labels. If you pass a non-null falsy value, it\n  //   won't have a label and nested fields won't have labels too.\n  label={true}\n  // Field name.\n  //   Used for identification. It should match your schema - if not, it will\n  //   throw an error.\n  name=\"field\"\n  // Field placeholder.\n  //   If set to true, then a label will be used. Otherwise, it's handled like\n  //   a label (including propagation).\n  placeholder={false}\n  // Field value.\n  //   Every field accepts its specific value type only.\n  value={value}\n\n  // You can pass any prop but remember that passing onChange will \"detach\"\n  // the field from the form in some way - it won't change your form state.\n  // Also, passing any already provided prop - like id - will override the\n  // default one.\n/>;\n")))}}]),n}(f.a.Component)}}]);
//# sourceMappingURL=pages-api-base-field.7bdcc2e35d2d8e0f9848.js.map