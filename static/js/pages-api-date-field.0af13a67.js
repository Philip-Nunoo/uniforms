(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{"./pages/API/DateField.mdx":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return v});var o=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),t=a.n(o),l=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/classCallCheck.js"),s=a.n(l),i=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/createClass.js"),r=a.n(i),p=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),c=a.n(p),d=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/getPrototypeOf.js"),m=a.n(d),u=a("./node_modules/docz-core/node_modules/@babel/runtime/helpers/inherits.js"),b=a.n(u),h=a("./node_modules/react/index.js"),f=a.n(h),g=a("./node_modules/@mdx-js/tag/dist/index.js"),v=function(e){function n(e){var a;return s()(this,n),(a=c()(this,m()(n).call(this,e))).layout=null,a}return b()(n,e),r()(n,[{key:"render",value:function(){var e=this.props,n=e.components;t()(e,["components"]);return f.a.createElement(g.MDXTag,{name:"wrapper",components:n},f.a.createElement(g.MDXTag,{name:"h2",components:n,props:{id:"datefield"}},"DateField"),f.a.createElement(g.MDXTag,{name:"pre",components:n},f.a.createElement(g.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import DateField from 'uniforms-unstyled/DateField'; // Choose your theme package.\n\n<DateField\n  // Field feedback state.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap4\n  feedbackable={true}\n  // Field layout.\n  //   Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object\n  //   is a {mode: size} object. Complete string is simply passed through.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Help text.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  help=\"Need help?\"\n  // Help block className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  helpClassName=\"a b c\"\n  // Input icon.\n  //   Semantic inputs can have an icon. By default, it's placed on the right\n  //   side - to place it on the left, use iconLeft prop instead.\n  // Available in:\n  //   semantic\n  icon=\"user\"\n  // Input left icon.\n  //   Semantic inputs can have an icon. With this prop, it's placed on the\n  //   left side - to place it on the right, use icon prop instead.\n  // Available in:\n  //   semantic\n  iconLeft=\"user\"\n  // Input icon props.\n  //   Semantic inputs can have an icon. These props are passed directly to\n  //   the icon element.\n  // Available in:\n  //   semantic\n  iconProps={{onClick() {}}}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on the field block. This\n  //   is used on the direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than an HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n  // Props for the InputLabel\n  // Available in:\n  //   material-ui\n  labelProps={{shrink: true, disableAnimation: true}}\n  // Maximum value.\n  //   Date object.\n  max={new Date(2100, 1, 1)}\n  // Minimal value.\n  //   Date object.\n  min={new Date(2000, 1, 1)}\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  //   material\n  showInlineError={true}\n  // Field and sourroundings wrap className.\n  //   In SemanticUI theme, this class name is used on ui input wrapper,\n  //   so you can pass classes like small, huge, inverted, transparent etc.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  wrapClassName=\"a b c\"\n  // Display time picker in ampm (12hr) format or 24hr format.\n  // Available in:\n  //   material\n  timeFormat=\"ampm\"\n/>;\n")),f.a.createElement(g.MDXTag,{name:"p",components:n},f.a.createElement(g.MDXTag,{name:"strong",components:n,parentName:"p"},"Note:")," All ",f.a.createElement(g.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"BaseField")," props are also accepted."))}}]),n}(f.a.Component)}}]);
//# sourceMappingURL=pages-api-date-field.7bdcc2e35d2d8e0f9848.js.map