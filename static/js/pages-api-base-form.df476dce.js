(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"./pages/API/BaseForm.mdx":function(e,n,o){"use strict";o.r(n),o.d(n,"default",function(){return v});var t=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),a=o.n(t),r=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/classCallCheck.js"),l=o.n(r),s=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/createClass.js"),i=o.n(s),m=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"),d=o.n(m),u=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/getPrototypeOf.js"),c=o.n(u),h=o("./node_modules/docz-core/node_modules/@babel/runtime/helpers/inherits.js"),b=o.n(h),f=o("./node_modules/react/index.js"),p=o.n(f),g=o("./node_modules/@mdx-js/tag/dist/index.js"),v=function(e){function n(e){var o;return l()(this,n),(o=d()(this,c()(n).call(this,e))).layout=null,o}return b()(n,e),i()(n,[{key:"render",value:function(){var e=this.props,n=e.components;a()(e,["components"]);return p.a.createElement(g.MDXTag,{name:"wrapper",components:n},p.a.createElement(g.MDXTag,{name:"h2",components:n,props:{id:"baseform"}},"BaseForm"),p.a.createElement(g.MDXTag,{name:"pre",components:n},p.a.createElement(g.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"import BaseForm from 'uniforms/BaseForm'; // Or from the theme package.\n\n<BaseForm\n  // Autosave delay.\n  //   Set 0 for an instant autosave.\n  autosaveDelay={0}\n  // Enable autosave.\n  //   Every change triggers onSubmit.\n  autosave={false}\n  // Disable form.\n  //   Disables all fields and submit button.\n  disabled={false}\n  // Validation error.\n  //   Current validation state. It should be either compatible with your\n  //   schema or an Error object.\n  error={new Error('Nope.')}\n  // Form layout.\n  //   Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object\n  //   is a {mode: size} object. Complete string is simply passed through.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  // Default label prop for all fields.\n  //   By default it's true - set it to false to disable labels for the whole\n  //   form.\n  label={true}\n  // Form model.\n  //   An object with {field: value} structure. It doesn't matter, if it has a\n  //   prototype or not, but keep in mind that in onSubmit or in onChangeModel\n  //   you'll receive a plain object. If you treat form as an input, then\n  //   this is a value.\n  model={{fieldA: 1}}\n  // Model transform.\n  //   Function transforming one model into another. It's used in few\n  //   situations (modes) described below. Do not mutate a given model!\n  modelTransform={(mode, model) => {\n    // This model will be passed to the fields.\n    if (mode === 'form') {\n      /* ... */\n    }\n\n    // This model will be submitted.\n    if (mode === 'submit') {\n      /* ... */\n    }\n\n    // This model will be validated.\n    if (mode === 'validate') {\n      /* ... */\n    }\n\n    // Otherwise, return unaltered model.\n    return model;\n  }}\n  // Field change action.\n  //   It receive two arguments: key and value, where key is a dot separated\n  //   path to the changed field and value is a requested value.\n  onChange={(key, value) => console.log(key, value)}\n  // Submit failure action.\n  //   If onSubmit returns a Promise, then this will be attached to its\n  //   .catch chain.\n  onSubmitFailure={() => alert('Promise rejected!')}\n  // Submit success action.\n  //   If onSubmit returns a Promise, then this will be attached to its\n  //   .then chain.\n  onSubmitSuccess={() => alert('Promise resolved!')}\n  // Submit action.\n  //   When the form is submitted manually or by a HTML5 event, then it's\n  //   called with the current model.\n  onSubmit={model => db.saveThatReturnsPromiseOrNothing(model)}\n  // Default placeholder prop for all fields.\n  //   By default it's false - set it to true to enable placeholders for the\n  //   whole form.\n  placeholder={false}\n  // Form schema.\n  //   BaseForm doesn't really care about it. It's used for form generation in\n  //   QuickForm and validation in ValidatedForm.\n  schema={myFormSchema}\n  // Default showInlineError prop for all fields.\n  //   By default it's false - set it to true to enable inline errors for the\n  //   whole form.\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  showInlineError={true}\n  // Form methods.\n  ref={form => {\n    // Reset form.\n    //   It will reset changed state, model state in AutoForm, validation\n    //   state in ValidatedForm and rerender.\n    form.reset();\n\n    // Trigger form change.\n    //   It's a programatic equivalent of a change event.\n    form.change(key, value);\n\n    // Submit form.\n    //   It's a programatic equivalent of a submit event. Returns a promise,\n    //   which will either resolve with submitted form or reject with\n    //   validation error in ValidatedForm. You can also use onSubmitFailure\n    //   and onSubmitSuccess instead of doing form.submit().then().\n    form.submit();\n  }}\n/>;\n")))}}]),n}(p.a.Component)}}]);
//# sourceMappingURL=pages-api-base-form.7bdcc2e35d2d8e0f9848.js.map