{"version":3,"sources":["webpack:///./pages/Introduction/QuickStart.mdx"],"names":["MDXContent","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","layout","_this$props","components","_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","id","parentName","href","className","React","Component"],"mappings":"i1BAQqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IACjBE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KACDO,OAAS,KAFGN,wDAIV,IAAAO,EAC0BL,KAAKH,MAA9BS,EADDD,EACCC,WADDC,IAAAF,EAAA,gBAGP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,KAAK,UAELN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYT,MAAO,CAACgB,GAAK,gBAAvD,eACrCL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,SAASN,WAAYA,EAAYQ,WAAW,KAAzD,SAAzC,8EAAuMN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,gBAAvM,qJAAubN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,EAAYQ,WAAW,IAAIjB,MAAO,CAACkB,KAAO,aAAvE,iBAAvb,oDACAP,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,gDACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAON,WAAYA,EAAYQ,WAAW,MAAMjB,MAAO,CAACmB,UAAY,gBAAjF,kcAW3CR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,eAAyDE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,YAAzD,kKACAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,yGACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAON,WAAYA,EAAYQ,WAAW,MAAMjB,MAAO,CAACmB,UAAY,wBAAjF,kqBA3BHC,IAAMC","file":"static/js/pages-introduction-quick-start.20c1a47c.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"quick-start\"}}>{`Quick start`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Note:`}</MDXTag>{` The following examples are designed to work out of the box in meteor with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SimpleSchema`}</MDXTag>{` (a very common schema in the meteor community), but it's not mandatory and you can easily use it without meteor and with different schemas (see: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"#schemas\"}}>{`Custom Schema`}</MDXTag>{`). There's also GraphQL and JSON Schema support.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's start with defining an example schema:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// Choose your theme\nimport AutoForm from 'uniforms-unstyled/AutoForm';\n\n// A compatible schema\nimport PostSchema from './schemas/Post';\n\n// This will render an automatic, validated form, with labelled fields, inline\n// validation and a submit button. If model will be present, form will be filled\n// with appropriate values.\nconst PostForm = ({model}) => <AutoForm schema={PostSchema} onSubmit={doc => db.save(doc)} model={model} />;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`That's all! `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AutoForm`}</MDXTag>{` will generate a complete form with labelled fields, errors list (if any) and a submit button. Also, it will take care of validation and handle model changes.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you want to have custom layout and/or structure inside your form you can include the form content.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`// Choose your theme\nimport AutoField from 'uniforms-unstyled/AutoField';\nimport AutoForm from 'uniforms-unstyled/AutoForm';\nimport SubmitField from 'uniforms-unstyled/SubmitField';\nimport TextField from 'uniforms-unstyled/TextField';\n\n// A compatible schema\nimport PostSchema from './schemas/Post';\n\nconst PostForm = ({model}) => (\n  <AutoForm schema={PostSchema} onSubmit={doc => db.save(doc)} model={model}>\n    <h2>Title</h2>\n\n    <AutoField name=\"fieldA\" />\n    <TextField name=\"fieldB\" />\n\n    <div className=\"super-special-class\">\n      <SubmitField className=\"super-special-class-with-suffix\" />\n    </div>\n  </AutoForm>\n);\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}